// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum TransactionType {
  INVESTMENT
  WITHDRAWAL
  DIVIDEND
  BONUS
  CREDIT
  DEBIT
  // Add other types as needed
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
  // Add other statuses as needed
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  investments       Investment[]
  transactions      Transaction[]
  investmentLedgers InvestmentLedger[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model InvestmentPlan {
  id               Int          @id @default(autoincrement())
  name             String
  amount           Float // Required: The total amount for the investment plan
  durationDays     Int // Required: The duration of the investment plan in days
  returnPercentage Float        @default(0) // we will calculate the return percentage based on days of invesment plan
  dailyInterest    Float
  status           String       @default("pending") // Optional: Status of the plan, default is "pending"
  startDate        DateTime // Required: The start date of the investment plan
  endDate          DateTime // Required: The end date of the investment plan
  createdAt        DateTime     @default(now()) // Automatically set to the current date and time
  updatedAt        DateTime     @updatedAt // Automatically updated to the current date and time
  investments      Investment[]
}

model Investment {
  id                Int                @id @default(autoincrement())
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  investmentPlanId  Int
  investmentPlan    InvestmentPlan     @relation(fields: [investmentPlanId], references: [id])
  amount            Float
  balance           Float              @default(0)
  expectedReturn    Float
  startDate         DateTime           @default(now())
  endDate           DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  transactions      Transaction[] // Add this line to establish the back relation
  investmentLedgers InvestmentLedger[]

  @@index([userId])
  @@index([investmentPlanId])
}

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  investmentId    Int
  investment      Investment        @relation(fields: [investmentId], references: [id])
  transactionType TransactionType // e.g., "withdrawal", "return"
  amount          Float
  status          TransactionStatus // e.g., "successful", "pending"
  date            DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
  @@index([investmentId])
}

model InvestmentLedger {
  id           Int      @id @default(autoincrement())
  userId       String
  investmentId Int
  dueDate      DateTime
  status       String   @default("INCOMPLETE") // INCOMPLETE, COMPLETE
  receivable   Float
  paid         Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  investment Investment @relation(fields: [investmentId], references: [id])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
