FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9.14.2

# Copy workspace config and package files
COPY pnpm-workspace.yaml ./
COPY package.json ./
COPY turbo.json ./
COPY apps/web/package.json apps/web/
COPY packages/*/package.json packages/

# Create necessary directories
RUN mkdir -p apps/web packages/logger packages/tsconfig packages/utils packages/types packages/eslint

# Copy all package.json files
COPY apps/web/package.json apps/web/
COPY packages/logger/package.json packages/logger/
COPY packages/tsconfig/package.json packages/tsconfig/
COPY packages/utils/package.json packages/utils/
COPY packages/types/package.json packages/types/
COPY packages/eslint/package.json packages/eslint/

# Install ALL dependencies (including devDependencies)
RUN pnpm install --no-frozen-lockfile

FROM base AS builder
WORKDIR /app


# Install pnpm
RUN npm install -g pnpm@9.14.2

# Copy workspace config
COPY pnpm-workspace.yaml ./
COPY package.json ./
COPY turbo.json ./

# Copy all package sources first
COPY packages/logger ./packages/logger
COPY packages/tsconfig ./packages/tsconfig
COPY packages/utils ./packages/utils
COPY packages/types ./packages/types
COPY packages/eslint ./packages/eslint

# Copy web app files including config files
COPY apps/web/next.config.cjs ./apps/web/
COPY apps/web/package.json ./apps/web/
COPY apps/web/postcss.config.js ./apps/web/
COPY apps/web/tailwind.config.ts ./apps/web/
COPY apps/web/tsconfig.json ./apps/web/
COPY apps/web/public ./apps/web/public
COPY apps/web/app ./apps/web/app
COPY apps/web/components ./apps/web/components
COPY apps/web/constants ./apps/web/constants
COPY apps/web/context ./apps/web/context
COPY apps/web/helpers ./apps/web/helpers
COPY apps/web/hooks ./apps/web/hooks
COPY apps/web/layouts ./apps/web/layouts
COPY apps/web/lib ./apps/web/lib
COPY apps/web/prisma ./apps/web/prisma
COPY apps/web/schema ./apps/web/schema
COPY apps/web/services ./apps/web/services
COPY apps/web/store ./apps/web/store
COPY apps/web/styles ./apps/web/styles
COPY apps/web/utils ./apps/web/utils

# Copy ALL web app files
COPY apps/web ./apps/web

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/web/node_modules ./apps/web/node_modules

# Set environment variables
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build workspace packages first
RUN pnpm --filter "@repo/types" build && \
    pnpm --filter "@repo/utils" build && \
    pnpm --filter "@repo/logger" build

# Then build the web app (no need to reinstall as we copied node_modules)
RUN cd apps/web && pnpm build

FROM base AS runner
WORKDIR /app

COPY . .

# Copy only the root node_modules
COPY --from=deps /app/node_modules ./node_modules

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs && \
    mkdir .next && \
    chown nextjs:nodejs .next

# Copy workspace configuration
COPY pnpm-workspace.yaml ./
COPY package.json ./

# Copy built workspace packages and their package.json files
COPY --from=builder /app/packages/types/package.json ./packages/types/
COPY --from=builder /app/packages/types/dist ./packages/types/dist
COPY --from=builder /app/packages/utils/package.json ./packages/utils/
COPY --from=builder /app/packages/utils/dist ./packages/utils/dist
COPY --from=builder /app/packages/logger/package.json ./packages/logger/
COPY --from=builder /app/packages/logger/dist ./packages/logger/dist

# Copy web app configuration
COPY apps/web/package.json ./apps/web/
COPY apps/web/next.config.cjs ./apps/web/

# Install production dependencies
RUN npm install -g pnpm@9.14.2 && \
    pnpm install --prod --no-frozen-lockfile

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/public ./public

# Set the correct permission for prerender cache
RUN chown -R nextjs:nodejs .

USER nextjs

EXPOSE 3000

# Start the application
CMD ["node", "server.js"]