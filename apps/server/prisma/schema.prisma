// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String?
  password          String
  role              Role               @default(USER)
  isEmailVerified   Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Token             Token[]
  investments       Investment[]
  transactions      Transaction[]
  investmentLedgers InvestmentLedger[]

  @@index([email])
}

model InvestmentPlan {
  id               Int          @id @default(autoincrement())
  name             String
  amount           Float // Required: The total amount for the investment plan
  durationDays     Int // Required: The duration of the investment plan in days
  returnPercentage Float        @default(0) // we will calculate the return percentage based on days of invesment plan
  dailyInterest    Float
  status           String       @default("pending") // Optional: Status of the plan, default is "pending"
  startDate        DateTime // Required: The start date of the investment plan
  endDate          DateTime // Required: The end date of the investment plan
  createdAt        DateTime     @default(now()) // Automatically set to the current date and time
  updatedAt        DateTime     @updatedAt // Automatically updated to the current date and time
  investments      Investment[]
}

model Investment {
  id                Int                @id @default(autoincrement())
  userId            Int
  user              User               @relation(fields: [userId], references: [id])
  investmentPlanId  Int
  investmentPlan    InvestmentPlan     @relation(fields: [investmentPlanId], references: [id])
  amount            Float
  balance           Float              @default(0)
  expectedReturn    Float
  startDate         DateTime           @default(now())
  endDate           DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  transactions      Transaction[] // Add this line to establish the back relation
  investmentLedgers InvestmentLedger[]

  @@index([userId])
  @@index([investmentPlanId])
}

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          Int
  user            User              @relation(fields: [userId], references: [id])
  investmentId    Int
  investment      Investment        @relation(fields: [investmentId], references: [id])
  transactionType TransactionType // e.g., "withdrawal", "return"
  amount          Float
  status          TransactionStatus // e.g., "successful", "pending"
  date            DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([userId])
  @@index([investmentId])
}

model InvestmentLedger {
  id           Int      @id @default(autoincrement())
  userId       Int
  investmentId Int
  dueDate      DateTime
  status       String   @default("INCOMPLETE") // INCOMPLETE, COMPLETE
  receivable   Float
  paid         Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  investment Investment @relation(fields: [investmentId], references: [id])
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum TransactionType {
  INVESTMENT
  WITHDRAWAL
  DIVIDEND
  BONUS
  CREDIT
  DEBIT
  // Add other types as needed
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
  // Add other statuses as needed
}
